{"version":3,"sources":["../src/server.js"],"names":[],"mappings":";;;;;;;;QAEO,qBAAqB;;oBACX,MAAM;;;;uBACH,SAAS;;;;qBACX,OAAO;;;;8BACJ,kBAAkB;;;;sBACpB,UAAU;;;;8BACZ,mBAAmB;;;;AAEpC,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,2BAAS,CAAC;;AAEzC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAE,CAAC;AAC/C,MAAM,CAAC,GAAG,CAAC,8BAAc,CAAC,kBAAK,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;;;;;AAK3D,MAAM,CAAC,GAAG,CAAC,cAAc,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;;;;;AAKrD,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,oBAAO,GAAG,EAAE,GAAG,EAAE,IAAI;;;;;;;;;cAE7B,UAAU,EACR,IAAI,EACJ,GAAG,EACH,OAAO,EAYP,IAAI;;;;AAfN,0BAAU,GAAG,GAAG;AACd,oBAAI,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;AACxD,mBAAG,GAAG,EAAE;AACR,uBAAO,GAAG;AACd,6BAAW,EAAE,qBAAA,KAAK;2BAAI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;mBAAA;AACrC,4BAAU,EAAE,oBAAA,KAAK;2BAAI,IAAI,CAAC,KAAK,GAAG,KAAK;mBAAA;AACvC,2BAAS,EAAE,mBAAC,GAAG,EAAE,KAAK;2BAAK,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK;mBAAA;AAC5C,gCAAc,EAAE;2BAAM,UAAU,GAAG,GAAG;mBAAA;iBACvC;;gDAEK,oBAAO,QAAQ,CAAC,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,OAAO,EAAP,OAAO,EAAE,EAAE,UAAC,KAAK,EAAE,SAAS,EAAK;AACvE,sBAAI,CAAC,IAAI,GAAG,4BAAS,cAAc,CAAC,SAAS,CAAC,CAAC;AAC/C,sBAAI,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;iBACzB,CAAC;;;AAEI,oBAAI,GAAG,4BAAS,oBAAoB,CAAC,8DAAU,IAAI,CAAI,CAAC;;AAC9D,mBAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;AAExD,YAAI,gBAAK,CAAC;;;;;;;CAEb,CAAC,CAAC;;;;;;AAMH,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,YAAM;;AAEtC,SAAO,CAAC,GAAG,CAAC,4CAA4C,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;AAC/E,MAAI,OAAO,CAAC,IAAI,EAAE;AAChB,WAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;GACxB;CACF,CAAC,CAAC","file":"server.js","sourcesContent":["/*! React Starter Kit | MIT License | http://www.reactstarterkit.com/ */\n\nimport 'babel-core/polyfill';\nimport path from 'path';\nimport express from 'express';\nimport React from 'react';\nimport ReactDOM from 'react-dom/server';\nimport Router from './routes';\nimport Html from './components/Html';\n\nconst server = global.server = express();\n\nserver.set('port', (process.env.PORT || 5000));\nserver.use(express.static(path.join(__dirname, 'public')));\n\n//\n// Register API middleware\n// -----------------------------------------------------------------------------\nserver.use('/api/content', require('./api/content'));\n\n//\n// Register server-side rendering middleware\n// -----------------------------------------------------------------------------\nserver.get('*', async (req, res, next) => {\n  try {\n    let statusCode = 200;\n    const data = { title: '', description: '', css: '', body: '' };\n    const css = [];\n    const context = {\n      onInsertCss: value => css.push(value),\n      onSetTitle: value => data.title = value,\n      onSetMeta: (key, value) => data[key] = value,\n      onPageNotFound: () => statusCode = 404,\n    };\n\n    await Router.dispatch({ path: req.path, context }, (state, component) => {\n      data.body = ReactDOM.renderToString(component);\n      data.css = css.join('');\n    });\n\n    const html = ReactDOM.renderToStaticMarkup(<Html {...data} />);\n    res.status(statusCode).send('<!doctype html>\\n' + html);\n  } catch (err) {\n    next(err);\n  }\n});\n\n//\n// Launch the server\n// -----------------------------------------------------------------------------\n\nserver.listen(server.get('port'), () => {\n  /* eslint-disable no-console */\n  console.log('The server is running at http://localhost:' + server.get('port'));\n  if (process.send) {\n    process.send('online');\n  }\n});\n"]}