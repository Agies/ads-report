{"version":3,"sources":["../../src/api/content.js"],"names":[],"mappings":";;;;;;;;;;;;oBAEqB,MAAM;;uBACJ,SAAS;;oBACf,MAAM;;;;2BACR,cAAc;;;;uBACd,aAAa;;;;;AAG5B,IAAM,WAAW,GAAG,gBAAK,SAAS,EAAE,WAAW,CAAC,CAAC;;;AAGjD,IAAM,SAAS,GAAG,SAAZ,SAAS,CAAI,IAAI,EAAE,WAAW,EAAK;AACvC,MAAM,SAAS,GAAG,8BAAG,WAAW,CAAC,CAAC;AAClC,MAAM,WAAW,GAAG,kBAAK,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AAChD,SAAO,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAJ,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC;CAC5E,CAAC;;AAEF,IAAM,MAAM,GAAG,qBAAY,CAAC;;AAE5B,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,oBAAO,GAAG,EAAE,GAAG,EAAE,IAAI;MAE3B,IAAI,EAON,QAAQ,EAQJ,MAAM,EACN,OAAO;;;;;AAhBT,YAAI,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI;;cAEvB,CAAC,IAAI,IAAI,IAAI,KAAK,WAAW,CAAA;;;;;AAC/B,WAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,KAAK,iDAA+C,EAAC,CAAC,CAAC;;;;AAI3E,gBAAQ,GAAG,gBAAK,WAAW,EAAE,CAAC,IAAI,KAAK,GAAG,GAAG,QAAQ,GAAG,IAAI,CAAA,GAAI,OAAO,CAAC;;wCACjE,qBAAG,MAAM,CAAC,QAAQ,CAAC;;;;;;;;AAC5B,gBAAQ,GAAG,gBAAK,WAAW,EAAE,IAAI,GAAG,aAAa,CAAC,CAAC;;;;wCAG1C,qBAAG,MAAM,CAAC,QAAQ,CAAC;;;;;;;;AAC5B,WAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,KAAK,kBAAe,IAAI,qBAAiB,EAAC,CAAC,CAAC;;;;;;wCAE7C,qBAAG,QAAQ,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;;;AAA1D,cAAM;AACN,eAAO,GAAG,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC;;AACvC,WAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;;;;;;;;;;AAGhC,YAAI,gBAAK,CAAC;;;;;;;CAEb,CAAC,CAAC;;qBAEY,MAAM","file":"content.js","sourcesContent":["/*! React Starter Kit | MIT License | http://www.reactstarterkit.com/ */\n\nimport { join } from 'path';\nimport { Router } from 'express';\nimport jade from 'jade';\nimport fm from 'front-matter';\nimport fs from '../utils/fs';\n\n// A folder with Jade/Markdown/HTML content pages\nconst CONTENT_DIR = join(__dirname, './content');\n\n// Extract 'front matter' metadata and generate HTML\nconst parseJade = (path, jadeContent) => {\n  const fmContent = fm(jadeContent);\n  const htmlContent = jade.render(fmContent.body);\n  return Object.assign({ path, content: htmlContent }, fmContent.attributes);\n};\n\nconst router = new Router();\n\nrouter.get('/', async (req, res, next) => {\n  try {\n    const path = req.query.path;\n\n    if (!path || path === 'undefined') {\n      res.status(400).send({error: `The 'path' query parameter cannot be empty.`});\n      return;\n    }\n\n    let fileName = join(CONTENT_DIR, (path === '/' ? '/index' : path) + '.jade');\n    if (!await fs.exists(fileName)) {\n      fileName = join(CONTENT_DIR, path + '/index.jade');\n    }\n\n    if (!await fs.exists(fileName)) {\n      res.status(404).send({error: `The page '${path}' is not found.`});\n    } else {\n      const source = await fs.readFile(fileName, { encoding: 'utf8' });\n      const content = parseJade(path, source);\n      res.status(200).send(content);\n    }\n  } catch (err) {\n    next(err);\n  }\n});\n\nexport default router;\n\n"]}